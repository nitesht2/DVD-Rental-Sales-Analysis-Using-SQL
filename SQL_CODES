##Query 1: We want to know the types of movie ratings that we have in our database.

SELECT DISTINCT(rating) FROM film;

##Query 2: How many unique payment amounts are there?

SELECT COUNT(DISTINCT (amount)) FROM payment;

##Query3: Find the information of customer named Jared.

SELECT * FROM customer
WHERE first_name = 'Jared'

##Query4_Challange: Which rated R movies has rental rate greater than 4 and replacement cost is greater or equal to $19.99

SELECT * FROM film
WHERE rental_rate > 4 and replacement_cost >= 19.99
AND rating='R';

##Query5_Challange: Customer forgot wallet at our store! we need to track down email information of customer named Nancy Thomas.

SELECT email FROM customer
WHERE first_name = 'Nancy'
AND last_name = 'Thomas'

##Query6_Challange: Customer wanted to know more about movie "Outlaw Hanky". Can you provide the description of the movie?

SELECT description
FROM film
Where title = 'Outlaw Hanky';

##Query7_Challange: Can you get the phone number of customer who lives at '259 ipoh Drive'?

SELECT phone FROM address
WHERE address='259 Ipoh Drive'

##Query8_Challange: We want to reward our first 10 paying customers.
##What are the cusotmer ids of the first 10 customers who created a payment?

SELECT customer_id FROM payment
ORDER BY payment_date ASC
LIMIT 10;

##Query9_Challange: Customer wants to quickly rent a video to watch during their short lunch break.
##What are the titles of the 5 shortest movies?

SELECT title, length
FROM film
ORDER BY length ASC
LIMIT 5;


##Query10_Challange: If the customer can watch any movie that is 50 minutes or less in run time,
how many options does the customer have?

SELECT COUNT(title)
FROM film
WHERE length<= 50

##Pattern Matching: LIKE operator
#Query11: How many customer are there whose first name starts with J and last name starts with S?

SELECT * FROM customer
WHERE first_name LIKE 'J%' AND last_name LIKE 'S%'

##Query12: To display the first name of the customers whose name has only one character before "her".

SELECT * FROM customer
WHERE first_name LIKE '_her%'

##Query13_challange: How many actors have a first name that starts with the letter P?

SELECT count(*) FROM actor
WHERE first_name LIKE 'P%';

##Query14_challange: How amny unique districts are our customers from?

SELECT COUNT(DISTINCT(district))
FROM address;

##Query15_Challange: How many films have a rating of R and a replacement cost between $5 and $15?

SELECT COUNT(*)
FROM film
WHERE rating = 'R'
And replacement_cost BETWEEN 5 AND 15;

##Query16_Challange: How many films have the word Truman somewhere in the title?

SELECT COUNT(*)
FROM film
WHERE title LIKE '%Truman%';

##Query17_Challange: We have two staff members, with Staff IDS 1 and 2. We want to give a bonus
to the staff member that handled the most payment.(Most in terms of number of payments processed,
not total dollar amount). How many payments did each staff memeber handle and who gets the bonus?
Result: Staff id with 2 should get bonus.

SELECT staff_id, COUNT(amount)
FROM payment
GROUP BY staff_id

##Corporate HQ is conducting a study on the relationship between replacement cost and a movie
MPAA rating. What is the average replavement cost per MPAA rating?

SELECT rating,
ROUND(AVG(replacement_cost),3)
FROM film
GROUP BY rating
Order BY AVG(replacement_cost) DESC

##We are running a promotion to reward our top 5 customer with coipons. What are the customer ids of the top 5 cusotmers by total spend?

SELECT customer_id, SUM(amount)
FROM payment
GROUP BY customer_id
ORDER BY SUM(amount) DESC
LIMIT 5;

## Company is lunching a platinum service for our most loyal customers. Platinum status is
assigned to those customers that have 40 or more transaction payments. What cusotmer_ids are
eligible for platinum status?

SELECT customer_id, COUNT(*)
FROM payment
GROUP BY customer_id
HAVING COUNT(*)>=40;

##What are the customer ids of customers who have spent more than $100 in payment transactions with our staff_id
member 2?

SELECT customer_id, SUM(amount)
FROM payment
Where staff_id=2
GROUP BY customer_id
HAVING SUM(amount)>100
ORDER BY SUM(amount)DESC

##Return the customer IDs of cusomters who have spent at least $110 with the staff member who has an ID of 2.

SELECT customer_id, SUM(amount)
FROM payment
WHERE staff_id=2
GROUP BY customer_id
HAVING SUM(amount)>110;

##How many films begin with the letter J?

SELECT COUNT(*) FROM film
WHERE title LIKE 'J%';

##What customer has the highest customer ID number whose name starts with an 'E' and has an address ID lower than 500?

SELECT first_name, last_name FROM customer
WHERE first_name LIKE 'E%'
AND address_id<500
ORDER BY customer_id DESC
LIMIT 1;

##California sales tax laws have changed and we need to alert our customers to this through email.
##What are the emails of the customers who live in California?

SELECT district, email
FROM address
INNER JOIN customer 
ON address.address_id = customer.address_id
WHERE district = 'California'

## Customer is huge fan of the actor "Nick Wahlberg" and wants to know all the movies he is in. We need to list all of his movies.

SELECT title, first_name, last_name
FROM film_actor
INNER JOIN actor
ON film_actor.actor_id = actor.actor_id
INNER JOIN film
ON film_actor.film_id = film.film_id
WHERE first_name = 'Nick'
AND last_name = 'Wahlberg'

##During which months did payments occur.

SELECT
DISTINCT(TO_CHAR(payment_date,'MONTH'))
FROM Payment

##Format your answer to return back the full month name.
SELECT COUNT(*)
FROM payment
WHERE EXTRACT(dow FROM payment_date) = 1

#SUBQUERIES
##Subquery using WHERE clause:

##Show the film_id, title, and rental rate of films with rental rates greater than the average rental rate. 

SELECT film_id, rental_rate, title
FROM film
WHERE rental_rate>
(SELECT AVG(rental_rate)
FROM film)

##Subquery using FROM clause:
##Company is planning to offer a platinum credit card to customers who had at least 36 rentals.
##How many customers made at least 36 rental transactions? How much revenue have they brought in to the company?

SELECT COUNT(p.customer_id), SUM(amount)
FROM (SELECT customer_id, COUNT(rental_id)
	FROM rental
	GROUP BY 1
	HAVING COUNT(rental_id)>= 36
	ORDER BY 1) sub1
JOIN payment p
ON sub1.customer_id = p.customer_id
ORDER BY 2;

## Show the list of unique films(film ID and title) rented by customers who paid an average amount of $4 or more to the company for any particular transaction

SELECT DISTINCT f.film_id, title
FROM(SELECT customer_id, ROUND(AVG(amount)) AS mean_payment
	FROM payment
	GROUP BY 1
	HAVING ROUND(AVG(amount))>=4) sub1
JOIN rental r
ON sub1.customer_id=r.customer_id
JOIN inventory i
ON r. inventory_id=i.inventory_id
JOIN film f
ON i.film_id=f.film_id;

##SUBQUERY using SELECT statement
##Show the store ID and customer count per store. Add a third column showing the total amount of revenue for the whole company. 

SELECT store_id, COUNT(customer_id), (SELECT SUM(amount)
									 FROM payment)
FROM customer
GROUP BY 1;



